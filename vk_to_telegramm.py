# -*- coding: utf-8 -*-

import os
import time
import sys
import vk_api
import telebot
import configparser
import logging
import threading
from time import sleep
from telebot import types
from telebot.types import InputMed
SINGLE_RUN = False

import bot_discuss_telegramm as mat


# –°—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
config_path = os.path.join(sys.path[0], 'settings.txt')
config = configparser.ConfigParser()
config.read(config_path)
LOGIN = config.get('VK', 'LOGIN')
PASSWORD = config.get('VK', 'PASSWORD')
DOMAIN = config.get('VK', 'DOMAIN')
COUNT = config.get('VK', 'COUNT')
VK_TOKEN = config.get('VK', 'TOKEN', fallback=None)
BOT_TOKEN = config.get('Telegram', 'BOT_TOKEN')
CHANNEL = config.get('Telegram', 'CHANNEL')
INCLUDE_LINK = config.getboolean('Settings', 'INCLUDE_LINK')
PREVIEW_LINK = config.getboolean('Settings', 'PREVIEW_LINK')

# –°–∏–º–≤–æ–ª—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ —Ä–∞–∑–±–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
message_breakers = [':', ' ', '\n']
max_message_length = 4091
max_message_length_capt = 1020


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)


# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ vk.com
def get_data(domain_vk, count_vk):
    global LOGIN
    global PASSWORD
    global VK_TOKEN
    global config
    global config_path

    if VK_TOKEN is not None:
        vk_session = vk_api.VkApi(LOGIN, PASSWORD, VK_TOKEN)
        vk_session.auth(token_only=True)
    else:
        vk_session = vk_api.VkApi(LOGIN, PASSWORD)
        vk_session.auth()

    new_token = vk_session.token['access_token']
    if VK_TOKEN != new_token:
        VK_TOKEN = new_token
        config.set('VK', 'TOKEN', new_token)
        with open(config_path, "w") as config_file:
            config.write(config_file)

    vk = vk_session.get_api()
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ wall.get –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ API vk.com
    response = vk.wall.get(domain=domain_vk, count=count_vk)
    return response


# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É—Å–ª–æ–≤–∏—è–º –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
def check_posts_vk():
    global DOMAIN
    global COUNT
    global INCLUDE_LINK
    global bot
    global config
    global config_path

    response = get_data(DOMAIN, COUNT)
    response = reversed(response['items'])

    for post in response:

        # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑–≤–µ—Å–Ω—ã–π id –∏–∑ —Ñ–∞–π–ª–∞
        id = config.get('Settings', 'LAST_ID')

        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º id, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ
        if int(post['id']) <= int(id):
            continue

        print('------------------------------------------------------------------------------------------------')
        print(post)

        # –¢–µ–∫—Å—Ç
        text = post['text']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —á—Ç–æ —Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ –∫ –ø–æ—Å—Ç—É
        images = []
        links = []
        attachments = []
        if 'attachments' in post:
            attach = post['attachments']
            for add in attach:
                if add['type'] == 'photo':
                    img = add['photo']
                    images.append(img)
                elif add['type'] == 'audio':
                    # –í—Å–µ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤–µ–∑–¥–µ, –∫—Ä–æ–º–µ –æ—Ñ—Ñ–∏—Ü–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
                    continue
                elif add['type'] == 'video':
                    video = add['video']
                    if 'player' in video:
                        links.append(video['player'])
                else:
                    for (key, value) in add.items():
                        if key != 'type' and 'url' in value:
                            attachments.append(value['url'])

        if INCLUDE_LINK:
            post_url = "https://vk.com/" + DOMAIN + "?w=wall" + \
                str(post['owner_id']) + '_' + str(post['id'])
            links.insert(0, post_url)
        text = '\n'.join([text] + links)
        # send_posts_text(text)
        
        if len(images) > 0:
            image_urls = list(map(lambda img: max(
                img["sizes"], key=lambda size: size["type"])["url"], images))
            print(image_urls)
            if len(text) >= max_message_length_capt:
                send_posts_text(text)
                bot.send_media_group(CHANNEL, map(lambda url: InputMediaPhoto(url), image_urls))
            else:
                bot.send_media_group(CHANNEL, map(lambda url: InputMediaPhoto(url, caption=text), image_urls))

        else:
            send_posts_text(text)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ä–µ–ø–æ—Å—Ç –¥—Ä—É–≥–æ–π –∑–∞–ø–∏—Å–∏
        if 'copy_history' in post:
            copy_history = post['copy_history']
            copy_history = copy_history[0]
            print('--copy_history--')
            print(copy_history)
            text = copy_history['text']
            send_posts_text(text)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É —Ä–µ–ø–æ—Å—Ç–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            image = []
            if 'attachments' in copy_history:
                copy_add = copy_history['attachments']
                copy_add = copy_add[0]

    # t—Å–ª–∏ —ç—Ç–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏
                if copy_add['type'] == 'photo':
                    attach = copy_history['attachments']
                    for img in attach:
                        if image in attach:
                            image = img['photo']
                            send_posts_img(image)
                        else:
                            continue
                if copy_add['type'] == 'video':
                    continue
                # –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞
                if copy_add['type'] == 'link':
                    link = copy_add['link']
                    text = link['title']
                   # send_posts_text(text)
                    img = link['photo']
                   # send_posts_img(img, caption=text)
                    url = link['url']
                    links.insert(0, url)
                    text = '\n'.join([text] + links)
                    #send_posts_img(img, caption=text)
                    send_posts_img(img, text)
                    # send_posts_text(url)

             
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º id –≤ —Ñ–∞–π–ª
        config.set('Settings', 'LAST_ID', str(post['id']))
        with open(config_path, "w") as config_file:
            config.write(config_file)


# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç—ã –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º


# –¢–µ–∫—Å—Ç
def send_posts_text(text):
    global CHANNEL
    global PREVIEW_LINK
    global bot

    if text == '':
        print('no text')
    else:
        # –í —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –¥–ª–∏–Ω—É –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ 4091 —Å–∏–º–≤–æ–ª, —Ä–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
        for msg in split(text):
            bot.send_message(CHANNEL, msg, disable_web_page_preview=not PREVIEW_LINK)

def split1020(text):
    global message_breakers
    global max_message_length_capt

    if len(text) >= max_message_length_capt:
        last_index = max(
            map(lambda separator: text.rfind(separator, 0, max_message_length_capt), message_breakers))
        good_part = text[:last_index]
        bad_part = text[last_index + 1:]
        return [good_part] + split(bad_part)
    else:
        return [text]


def split(text):
    global message_breakers
    global max_message_length

    if len(text) >= max_message_length:
        last_index = max(
            map(lambda separator: text.rfind(separator, 0, max_message_length), message_breakers))
        good_part = text[:last_index]
        bad_part = text[last_index + 1:]
        return [good_part] + split(bad_part)
    else:
        return [text]


# –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏
def send_posts_img(img):
    global bot
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
    url = max(img["sizes"], key=lambda size: size["type"])["url"]
    bot.send_photo(CHANNEL, url)

# –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è capt
def send_posts_img_capt(img, text):
    global bot
    
    # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
    url = max(img["sizes"], key=lambda size: size["type"])["url"]
    bot.send_photo(CHANNEL, url, caption=text)


# *------------------
@bot.message_handler(commands=['start'])



#---------------------------------------------------------------------------



def welcome(message):
    sti = open('welcome.webp', 'rb')
    bot.send_sticker(message.chat.id, sti)


    #–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("üéì–ö–∞—Ñ–µ–¥—Ä–∞ –ü–ò–∏–í–¢üéì")
    item2 = types.KeyboardButton("‚ö†–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏‚ö†")
    item3 = types.KeyboardButton("üíª–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏üíª")
   

 
    markup.add(item1, item2, item3)
 
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>, –¥–∞–º —Ç–µ–±–µ –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ñ–µ–¥—Ä–µ –ü–ò–∏–í–¢ ".format(message.from_user, bot.get_me()),
        parse_mode='html', reply_markup=markup)
 
@bot.message_handler(content_types=['text'])



#---------------------------------------------------------------------------



def func(message):
    if message.chat.type == 'private':
        if message.text == 'üéì–ö–∞—Ñ–µ–¥—Ä–∞ –ü–ò–∏–í–¢üéì':
 
 			# –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ —Ç–µ–∫—Å—Ç–æ–º
            markup = types.InlineKeyboardMarkup(row_width=3)
            item1 = types.InlineKeyboardButton("üè¢–û –∫–∞—Ñ–µ–¥—Ä–µ –ü–ò–∏–í–¢üè¢", callback_data='1')
            item2 = types.InlineKeyboardButton("üë®‚Äçüè´–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å—Å–∫–∏–πüë®‚Äçüè´ —Å–æ—Å—Ç–∞–≤", callback_data='2')
            item3 = types.InlineKeyboardButton("üß†–ü—Ä–µ–ø–æ–¥–∞–≤–∞–µ–º—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ãüß†", callback_data='3')
            #–ö–Ω–æ–ø–∫–∞ –ø–æ–¥ —á–∞—Ç(–í—Å—Ç–∞–≤–∏—Ç—å –Ω—É–∂–Ω—É—é —Å—Å—ã–ª–∫—É)
            item4 = types.InlineKeyboardButton("üí¨–û–±—â–∏–π —á–∞—Çüí¨", url="https://t.me/+U87b6tNPEd1iZGNi")
 
            markup.add(item1, item2, item3, item4)
 
            bot.send_message(message.chat.id, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?', reply_markup=markup)

       
        elif message.text == "‚ö†–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏‚ö†":
            bot.send_message(message.chat.id, "–¢–µ–ª–µ—Ñ–æ–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ñ–µ–¥—Ä—ã –ü–ò–í–¢ 441/2: +7 (812) 305-12-56, –¥–æ–±. 2107\n–°—Å—ã–ª–∫–∏:\n–°–∞–π—Ç –∫–∞—Ñ–µ–¥—Ä—ã - https://pivt.sut.ru/\n–õ–ö  - https://lk.sut.ru/cabinet/\n–õ–ú–° - https://lms.spbgut.ru/")

        else:
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É')


#---------------------------------------------------------------------------



@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:

        	#–†–∞–±–æ—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥ —Ç–µ–∫—Å—Ç–æ–º
            if call.data == '1':
                bot.send_message(call.message.chat.id, '–ö–∞—Ñ–µ–¥—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏ –∏ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ (–ü–ò–í–¢) –Ω–∞—á–∞–ª–∞ —Å–≤–æ–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –µ—â–µ –≤ 1967 –≥–æ–¥—É.\n–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–≤—É—á–∞–ª–æ –∫–∞–∫ –∫–∞—Ñ–µ–¥—Ä–∞ –∏–º–ø—É–ª—å—Å–Ω–æ–π –∏ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ (–ò–í–¢) –∏ —Å—Ç–∞–≤–∏–ª–∞ —Å–≤–æ–µ–π —Ü–µ–ª—å—é –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≤—Å–µ—Ö —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–æ–ª—É–ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç–Ω–æ–π –±–∞–∑—ã –∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –≠–í–ú.\n–ó–∞—Ç–µ–º, –¥–æ 2013 –≥–æ–¥–∞, –∫–∞—Ñ–µ–¥—Ä–∞ –Ω–æ—Å–∏–ª–∞ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ ‚Äì –∫–∞—Ñ–µ–¥—Ä–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–π –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∏ (–¶–í–¢–∏–ò).\n–ò —É–∂–µ –≤ 2013 –≥–æ–¥—É –ø–æ–ª—É—á–∏–ª–∞ —Å–≤–æ–µ –Ω—ã–Ω–µ—à–Ω–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.\n–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —à—Ç–∞—Ç –∫–∞—Ñ–µ–¥—Ä—ã —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–≤—ã—à–µ 20 –µ–¥–∏–Ω–∏—Ü –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä—Å–∫–æ-–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞ –∏ 4 –µ–¥–∏–Ω–∏—Ü—ã —É—á–µ–±–Ω–æ-–≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞.\n–ù–∞ –∫–∞—Ñ–µ–¥—Ä–µ —Ä–∞–±–æ—Ç–∞—é—Ç —à–µ—Å—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä–æ–≤ –∏ —Å–µ–º—å –¥–æ—Ü–µ–Ω—Ç–æ–≤.')

            elif call.data == '2':
               
                bot.send_message(call.message.chat.id, '–ê–Ω–æ—Ö–∏–Ω\n–Æ—Ä–∏–π –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á\n–°—Ç–∞—Ä—à–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∫–∞—Ñ–µ–¥—Ä—ã –ü–ò–∏–í–¢\n\n–ê—Ö–º–µ—Ç–æ–≤–∞\n–Æ–ª–∏—è –°–ª–∞–≤–æ–≤–Ω–∞\n–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–∞—Ñ–µ–¥—Ä—ã –ü–ò–∏–í–¢\n\n–ë–µ–ª–∞—è\n–¢–∞—Ç—å—è–Ω–∞ –ò–æ–∞–Ω–Ω–æ–≤–Ω–∞\n–ö–∞–Ω–¥–∏–¥–∞—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –Ω–∞—É–∫\n–î–æ—Ü–µ–Ω—Ç –∫–∞—Ñ–µ–¥—Ä—ã –ü–ò–∏–í–¢\n\n–ë–µ—Ä–µ–∑–∏–Ω\n–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –Æ—Ä—å–µ–≤–∏—á\n–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–∞—Ñ–µ–¥—Ä—ã –ü–ò–∏–í–¢\n\n–ë–∏—Ä—é–∫–æ–≤\n–ú–∏—Ö–∞–∏–ª –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á\n–ö–∞–Ω–¥–∏–¥–∞—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫\n–î–æ—Ü–µ–Ω—Ç –∫–∞—Ñ–µ–¥—Ä—ã –ü–ò–∏–í–¢\n\n–ë–æ–±—Ä–æ–≤—Å–∫–∏–π\n–í–∞–¥–∏–º –ò–≥–æ—Ä–µ–≤–∏—á\n–î–æ–∫—Ç–æ—Ä —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫, –¥–æ—Ü–µ–Ω—Ç\n–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä –∫–∞—Ñ–µ–¥—Ä—ã –ü–ò–∏–í–¢\n\n–í–æ—Ä–æ–Ω—Ü–æ–≤–∞\n–ò—Ä–∏–Ω–∞ –û–ª–µ–≥–æ–≤–Ω–∞\n–°—Ç–∞—Ä—à–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∫–∞—Ñ–µ–¥—Ä—ã –ü–ò–∏–í–¢\n\n–î–∞–≥–∞–µ–≤\n–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏\n–ö–∞–Ω–¥–∏–¥–∞—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫\n–î–æ—Ü–µ–Ω—Ç –∫–∞—Ñ–µ–¥—Ä—ã –ü–ò–∏–í–¢\n\n–ï—Ä–º–∞–∫–æ–≤–∞\n–¢–∞—Ç—å—è–Ω–∞ –í—è—á–µ—Å–ª–∞–≤–æ–≤–Ω–∞\n–°—Ç–∞—Ä—à–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∫–∞—Ñ–µ–¥—Ä—ã –ü–ò–∏–í–¢\n\n–ï—Ä–æ—Ñ–µ–µ–≤\n–°–µ—Ä–≥–µ–π –ê–Ω–∞—Ç–æ–ª—å–µ–≤–∏—á\n–ö–∞–Ω–¥–∏–¥–∞—Ç —Ñ–∏–∑–∏–∫–æ-–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫\n–î–æ—Ü–µ–Ω—Ç –∫–∞—Ñ–µ–¥—Ä—ã –ü–ò–∏–í–¢\n\n–ñ—É—Ä–∞–≤–µ–ª—å\n–ï–≤–≥–µ–Ω–∏–π –ü–∞–≤–ª–æ–≤–∏—á\n–ö–∞–Ω–¥–∏–¥–∞—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫\n–î–æ—Ü–µ–Ω—Ç –∫–∞—Ñ–µ–¥—Ä—ã –ü–ò–∏–í–¢\n\n–†—É—Å–ª–∞–Ω –í–∞–ª–µ–Ω—Ç–∏–Ω–æ–≤–∏\n–î–æ–∫—Ç–æ—Ä —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫, –¥–æ—Ü–µ–Ω—Ç\n–ó–∞–≤–µ–¥—É—é—â–∏–π –∫–∞—Ñ–µ–¥—Ä–æ–π –ü–ò–∏–í–¢\n\n–ö–æ—Ä–æ–±–æ–≤\n–°–µ—Ä–≥–µ–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á\n–ö–∞–Ω–¥–∏–¥–∞—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫\n–î–æ—Ü–µ–Ω—Ç –∫–∞—Ñ–µ–¥—Ä—ã –ü–ò–∏–í–¢\n\n–ö—Ä–∞–µ–≤–∞\n–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –í–∏—Ç–∞–ª—å–µ–≤–Ω–∞\n–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–∞—Ñ–µ–¥—Ä—ã –ü–ò–∏–í–¢\n\n–õ—É–∫—à–∞\n–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n–ö–∞–Ω–¥–∏–¥–∞—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫\n–î–æ—Ü–µ–Ω—Ç –∫–∞—Ñ–µ–¥—Ä—ã –ü–ò–∏–í–¢\n\n–ù–µ–µ–ª–æ–≤–∞\n–û–ª—å–≥–∞ –õ–µ–æ–Ω–∏–¥–æ–≤–Ω–∞\n–°—Ç–∞—Ä—à–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∫–∞—Ñ–µ–¥—Ä—ã –ü–ò–∏–í–¢\n\n–ù–æ–≤–æ–∂–µ–Ω–∏–Ω\n–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –í–∞—Å–∏–ª—å–µ–≤–∏—á\n–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–∞—Ñ–µ–¥—Ä—ã –ü–ò–∏–í–¢\n\n–û–≤—á–∏–Ω–Ω–∏–∫–æ–≤\n–ê–Ω—Ç–æ–Ω –û–ª–µ–≥–æ–≤–∏—á\n–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–∞—Ñ–µ–¥—Ä—ã –ü–ò–∏–í–¢\n\n–û–∫—É–Ω–µ–≤–∞\n–î–∞—Ä–∏–Ω–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞\n–ö–∞–Ω–¥–∏–¥–∞—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫\n–î–æ—Ü–µ–Ω—Ç –∫–∞—Ñ–µ–¥—Ä—ã –ü–ò–∏–í–¢\n\n–ü–∞—á–∏–Ω\n–ê–Ω–¥—Ä–µ–π –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á\n–ö–∞–Ω–¥–∏–¥–∞—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫\n–î–æ—Ü–µ–Ω—Ç –∫–∞—Ñ–µ–¥—Ä—ã –ü–ò–∏–í–¢\n\n–ü–µ—Ç—Ä–æ–≤–∞\n–û–ª—å–≥–∞ –ë–æ—Ä–∏—Å–æ–≤–Ω–∞\n–ó–∞–≤–µ–¥—É—é—â–∞—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–µ–π –∫–∞—Ñ–µ–¥—Ä—ã –ü–ò–∏–í–¢, –°—Ç–∞—Ä—à–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∫–∞—Ñ–µ–¥—Ä—ã –ü–ò–∏–í–¢\n\n–ü–æ–º–æ–≥–∞–ª–æ–≤–∞\n–ê–ª—å–±–∏–Ω–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞\n–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–∞—Ñ–µ–¥—Ä—ã –ü–ò–∏–í–¢\n\n–†–µ–∑–Ω–∏–∫–æ–≤\n–ë–æ–≥–¥–∞–Ω –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω–æ–≤–∏—á\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∫–∞—Ñ–µ–¥—Ä—ã –ü–ò–∏–í–¢\n\n–°–∞–≤–µ–ª—å–µ–≤\n–ò–≥–æ—Ä—å –õ–µ–æ–Ω–∏–¥–æ–≤–∏—á\n–°—Ç–∞—Ä—à–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∫–∞—Ñ–µ–¥—Ä—ã –ü–ò–∏–í–¢\n\n–°—Ç–µ–ø–∞–Ω–µ–Ω–∫–æ–≤\n–ì—Ä–∏–≥–æ—Ä–∏–π –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á\n–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–∞—Ñ–µ–¥—Ä—ã –ü–ò–∏–í–¢\n\n–§–æ–º–∏–Ω\n–í–ª–∞–¥–∏–º–∏—Ä –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á\n–î–æ–∫—Ç–æ—Ä —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫, –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä\n–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä –∫–∞—Ñ–µ–¥—Ä—ã –ü–ò–∏–í–¢\n\n–§—É—Ç–∞—Ö–∏ –ê–±–¥–æ\n–ê—Ö–º–µ–¥ –•–∞—Å–∞–Ω\n–ö–∞–Ω–¥–∏–¥–∞—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫\n–î–æ—Ü–µ–Ω—Ç –∫–∞—Ñ–µ–¥—Ä—ã –ü–ò–∏–í–¢\n\n–•–∞–∑–∏–µ–≤\n–ù—É—Ä–≥–∞—è–Ω –ù—É—Ä—É—Ç–¥–∏–Ω–æ–≤–∏—á\n–°—Ç–∞—Ä—à–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∫–∞—Ñ–µ–¥—Ä—ã –ü–ò–∏–í–¢\n\n–®–∞—Ä–ª–∞–µ–≤–∞\n–ú–∞—Ä–∏—è –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞\n–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–∞—Ñ–µ–¥—Ä—ã –ü–ò–∏–í–¢')

            elif call.data == '3':
                bot.send_message(call.message.chat.id, '‚û§Web-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\n\n‚û§–ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏\n\n‚û§–ê–ª–≥–æ—Ä–∏—Ç–º—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö\n\n‚û§–ê–ø–ø–∞—Ä–∞—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏\n\n‚û§–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º\n\n‚û§–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n\n‚û§–í–≤–µ–¥–µ–Ω–∏–µ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—É—é –∏–Ω–∂–µ–Ω–µ—Ä–∏—é\n\n‚û§–í—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è –∏ –º–∏–∫—Ä–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞\n\n‚û§–í—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞\n\n‚û§–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–æ–π –∏ –º–∏–∫—Ä–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ –≤ –æ–ø—Ç–∏–∫–æ-—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º –ø—Ä–∏–±–æ-—Ä–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏\n\n‚û§–ö–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞–Ω–∏–µ –ü–û\n\n‚û§–õ–æ–≥–∏—á–µ—Å–∫–æ–µ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n‚û§–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –∏ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º —Å–≤—è–∑–∏\n\n‚û§–ú–∞—à–∏–Ω–Ω–æ-–∑–∞–≤–∏—Å–∏–º—ã–µ —è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è\n\n‚û§–ú–∏–∫—Ä–æ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n\n‚û§–û–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n‚û§–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã\n\n‚û§–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏ —Å–µ—Ç–∏\n\n‚û§–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n‚û§–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ 1–°\n\n‚û§–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å—Ä–µ–¥–µ 1–°\n\n‚û§–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∫–∏–±–µ—Ä—Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º\n\n‚û§–ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º —Å–≤—è–∑–∏\n\n‚û§–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã—Ö —Å–∏—Å—Ç–µ–º\n\n‚û§–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Java –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è–º–∏\n\n‚û§–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Java-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è–º–∏\n\n‚û§–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è\n\n‚û§–°–∏—Å—Ç–µ–º—ã –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞\n\n‚û§–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ü–û\n\n‚û§–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è\n\n‚û§–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –º–µ—Ç–æ–¥—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è\n\n‚û§–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è\n\n‚û§–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è\n\n‚û§–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏')

 
            # remove inline buttons
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                reply_markup=None)
 

 
    except Exception as e:
        print(repr(e))
 

def runBot():
    bot.polling(none_stop=True)

def runChecker():
    if not SINGLE_RUN:
        while True:
            check_posts_vk()
            # –ü–∞—É–∑–∞ –≤ 4 –º–∏–Ω—É—Ç—ã –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            logging.info('[App] Script went to sleep.')
            time.sleep(60)
    else:
        check_posts_vk()
    logging.info('[App] Script exited.\n')

# *------------------

if __name__ == '__main__':
   # –ò–∑–±–∞–≤–ª—è–µ–º—Å—è –æ—Ç —Å–ø–∞–º–∞ –≤ –ª–æ–≥–∞—Ö –æ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ requests
    logging.getLogger('requests').setLevel(logging.CRITICAL)
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–∞—à –ª–æ–≥–≥–µ—Ä
    logging.basicConfig(format='[%(asctime)s] %(filename)s:%(lineno)d %(levelname)s - %(message)s', level=logging.INFO,
                        filename='bot_log.log', datefmt='%d.%m.%Y %H:%M:%S')
    t1 = threading.Thread(target=runBot)
    t2 = threading.Thread(target=runChecker)
  # starting thread 1
    t1.start()
  # starting thread 2
    t2.start()
